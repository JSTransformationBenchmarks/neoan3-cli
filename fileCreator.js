const fs = require('fs');
let dir ='./';
let fileCreator = {
    create:function(type,name){
        if(this.directoryManager.folder(type,name)){
            this.directoryManager.version(type,name);
            console.log('writing...');
            return true;
        }
        return false;
    },
    frame:function(name){
        if(this.create('frame',name)){
            this.php.namespace('Frame');
            this.php.use('Core\\Serve');
            this.php.class(name,'Serve');
            this.php.closingCurly();
            fs.appendFile(dir+'frame/'+name.toLowerCase()+'/'+fileCreator.fucase(name)+'.php',this.php.fileString, function(err){
                if (err) throw err;
                console.log('Frame %s created',name);
            });
        }
    },
    component:function(name,cType, frame){
        if(this.create('component',name)){
            this.php.namespace('Components');
            this.php.use('Core\\Unicore');
            if(cType === 'api'){
                this.php.use('Frame\\'+this.fucase(frame));
            }
            this.php.class(name,'Unicore');
            switch (cType) {
                case 'route':
                    this.php.classFunction('init',"$this->uni()->output();");
                    break;
                case 'api':
                    this.php.classFunction('get'+this.fucase(name),"","$obj");
                    this.php.classFunction('post'+this.fucase(name),"","$obj");
                    break;
            }
            this.php.closingCurly();
            fs.appendFile(dir + 'component/' + name + '/' + fileCreator.fucase(name) +'.ctrl.php', this.php.fileString, function (err) {
                if (err) throw err;
                console.log('Component %s created',name);
            });
        }

    },
    php:{
        fileString:false,
        init:function(){
            if(!this.fileString){
                this.fileString = "<?php\n/* Generated by neoan3-cli */\n\n";
            }
        },
        indentation:function(x){
            this.fileString += "    ".repeat(x);

        },
        namespace:function (type) {
            this.init();
            this.fileString += "namespace Neoan3\\"+type+";\n\n";
        },
        use:function(str){
            this.init();
            this.fileString += "use Neoan3\\"+str+";\n"
        },
        class:function(name,extend){
            this.init();
            this.fileString += "\nclass " + fileCreator.fucase(name);
            if(typeof extend !== 'undefined'){
                this.fileString += " extends " + fileCreator.fucase(extend);
            }
            this.fileString += " {\n";
        },
        classFunction:function(name,inner,arg){
            this.init();
            this.indentation(1);
            this.publicFunction(name,arg);
            this.indentation(2);
            this.fileString += inner + "\n";
            this.indentation(1);
            this.closingCurly();
            this.fileString += "\n";
        },
        publicFunction:function(fname,arg){
            this.init();
            this.fileString += "function "+fname+"("+(arg?arg:'')+"){\n";
        },
        closingCurly:function(){
            this.fileString += "}\n";
        }
    },
    fucase:function(string){
        return string.charAt(0).toUpperCase() + string.slice(1);
    },
    directoryManager:{
        folder:function(type,name){
            if (!fs.existsSync(dir+type+'/'+name)) {
                fs.mkdirSync(dir+type+'/'+name);
                return true;
            } else {
                console.log('%s %s already exists',type,name);
                return false;
            }
        },
        version:function(type,name){
            fs.appendFile(dir + type+'/' + name.toLowerCase() + '/version.json', fileCreator.versionJson(name), function (err) {
                if (err) throw err;
            });
        }
    },
    versionJson:function(name){
        let json = {"version":"0.0.1","name":name};
        return JSON.stringify(json);
    },
};
module.exports = fileCreator;
