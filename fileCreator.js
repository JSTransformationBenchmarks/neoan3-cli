const fs = require('fs');
let dir ='./';
let fileCreator = {
    create:function(type,name){
        if(this.directoryManager.folder(type,name.toLowerCase())){
            this.directoryManager.version(type,name.toLowerCase());
            console.log('writing...');
            return true;
        }
        return false;
    },
    frame:function(name){
        if(this.create('frame',name)){
            this.php.namespace('Frame');
            this.php.use('Core\\Serve');
            this.php.class(name,'Serve');
            this.php.closingCurly();
            this.writeToFile(name,'frame');
        }
    },
    model:function(name){
        if(this.create('model',name)){
            this.php.namespace('Model');
            this.php.class(name,'IndexModel');
            this.php.classFunction('byId','','$id','static');
            this.php.closingCurly();
            this.writeToFile(name,'model');
            fs.appendFile(dir + '/model/' + name.toLowerCase() + '/migrate.json', '{}', function (err) {
                if (err) throw err;
            });
        }
    },
    component:function(name,cType, answer){
        if(this.create('component',name)){
            this.php.namespace('Components');
            this.php.use('Core\\Unicore');
            if(cType === 'api'){
                this.php.use('Frame\\'+this.fucase(answer.frame));
            }
            this.php.class(name,'Unicore');
            switch (cType) {
                case 'route':
                    let inner = "$this->uni()->";
                    if(answer.frame){
                        inner = "$this->uni('"+answer.frame+"')->";
                    }
                    if(answer.hasView){
                        this.htmlView(name);
                        inner += "hook('main','"+name.toLowerCase()+"')->";
                    }
                    this.php.classFunction('init',inner+"output();");
                    break;
                case 'api':
                    this.php.classFunction('get'+this.fucase(name),"","$obj");
                    this.php.classFunction('post'+this.fucase(name),"","$obj");
                    break;
            }
            this.php.closingCurly();
            this.writeToFile(name,'component');
        }

    },
    php:{
        fileString:false,
        init:function(){
            if(!this.fileString){
                this.fileString = "<?php\n/* Generated by neoan3-cli */\n\n";
            }
        },
        indentation:function(x){
            this.fileString += "    ".repeat(x);

        },
        namespace:function (type) {
            this.init();
            this.fileString += "namespace Neoan3\\"+type+";\n\n";
        },
        use:function(str){
            this.init();
            this.fileString += "use Neoan3\\"+str+";\n"
        },
        class:function(name,extend){
            this.init();
            this.fileString += "\nclass " + fileCreator.fucase(name);
            if(typeof extend !== 'undefined'){
                this.fileString += " extends " + fileCreator.fucase(extend);
            }
            this.fileString += " {\n";
        },
        classFunction:function(name,inner,arg,typus='public'){
            this.init();
            this.indentation(1);
            if(typus === 'public'){
                this.publicFunction(name,arg);
            } else if(typus === 'static'){
                this.staticFunction(name,arg);
            }
            this.indentation(2);
            this.fileString += inner + "\n";
            this.indentation(1);
            this.closingCurly();
            this.fileString += "\n";
        },
        staticFunction:function(fname,arg){
            this.init();
            this.fileString += "static function "+fname+"("+(arg?arg:'')+"){\n";
        },
        publicFunction:function(fname,arg){
            this.init();
            this.fileString += "function "+fname+"("+(arg?arg:'')+"){\n";
        },
        closingCurly:function(){
            this.fileString += "}\n";
        }
    },
    htmlView:function(name){
        fs.writeFile(dir+'component/'+name.toLowerCase()+'/'+name.toLowerCase()+'.view.html','<h1>'+name+'</h1>',function(err,outd){
            if(err){
                throw new Error(err);
            }
        });
    },
    htaccess:function(base){
        let content = fs.readFileSync('./.htaccess','utf8');
        let newContent = content.replace(/RewriteBase\s\/[a-z0-9\/-]+/im,function(x){
            return 'RewriteBase /'+base+'/';
        });
        fs.writeFile('./.htaccess',newContent,function(err,outd){
            if(err){
                throw new Error(err);
            }
        });

    },
    writeToFile:function(name,type){
        let localExt;
        switch (type) {
            case 'component': localExt = '.ctrl.php'; break;
            case 'model': localExt = '.model.php'; break;
            default: localExt = '.php';break;
        }
        let loType = this.fucase(type);
        fs.appendFile(dir + type+'/' + name.toLowerCase() + '/' + fileCreator.fucase(name) +localExt, this.php.fileString, function (err) {
            if (err) throw err;
            console.log('%s %s created',loType,name);
        });
    },
    fucase:function(string){
        return string.charAt(0).toUpperCase() + string.slice(1);
    },
    directoryManager:{
        folder:function(type,name){
            if (!fs.existsSync(dir+type+'/'+name)) {
                fs.mkdirSync(dir+type+'/'+name);
                return true;
            } else {
                console.log('%s %s already exists',type,name);
                return false;
            }
        },
        version:function(type,name){
            fs.appendFile(dir + type+'/' + name.toLowerCase() + '/version.json', fileCreator.versionJson(name), function (err) {
                if (err) throw err;
            });
        }
    },
    versionJson:function(name){
        let json = {"version":"0.0.1","name":name};
        return JSON.stringify(json);
    },
};
module.exports = fileCreator;
